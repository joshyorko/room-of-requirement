name: Build and Push Devcontainer
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - .devcontainer/**
  schedule:
    - cron: '0 10 * * *'
concurrency:
  group: devcontainer-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: joshyorko/ror

jobs:
  # 1) Dockerfile lint (fail fast)
  dockerfile-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: .devcontainer/Dockerfile
          # config: .hadolint.yaml

  # 2) Build & push via devcontainers/ci (the right tool for GitHub)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [dockerfile-lint]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set DATE_TAG
        id: set_date_tag
        run: echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha
            type=raw,value=${{ steps.set_date_tag.outputs.date }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=Room of Requirement Devcontainer
            org.opencontainers.image.description=Prebuilt Devcontainer image for development & CI
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Dev Container image
        uses: devcontainers/ci@v0.3
        with:
          imageName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          imageTag: latest,${{ steps.set_date_tag.outputs.date }},sha-${{ github.sha }}
          push: always
          # subFolder: .devcontainer
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: sarif
          output: trivy.sarif
          ignore-unfixed: true
          vuln-type: "os,library"
      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
      - name: Devcontainer Metadata Summary
        run: |
          echo "" > $GITHUB_STEP_SUMMARY
          echo "# 🪄 Room of Requirement: Devcontainer Build ✨" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**✅ Build Complete!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Key | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ **SHA Tag** | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🆕 **Tags** | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 **GHCR Link** | [View on GHCR](https://github.com/joshyorko/room-of-requirement/pkgs/container/ror) |" \
            >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Usage Example" >> $GITHUB_STEP_SUMMARY
          echo '```shell' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "✨ _Happy coding in your custom devcontainer!_ ✨" >> $GITHUB_STEP_SUMMARY
      - name: Verify Image in GHCR
        run: |
          skopeo inspect docker://ghcr.io/${{ env.IMAGE_NAME }}:latest | jq '.Layers | length'
          skopeo inspect docker://ghcr.io/${{ env.IMAGE_NAME }}:sha-${{ github.sha }} | jq '.Layers | length'
          skopeo inspect docker://ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.set_date_tag.outputs.date }} | jq '.Layers | length'
