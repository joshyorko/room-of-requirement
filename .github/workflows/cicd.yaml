name: Build and Push Devcontainer

on:
  workflow_dispatch:
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - '.devcontainer/**'
  #    - '.github/workflows/build-devcontainer.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: joshyorko/ror

jobs:
  build-and-push:
    runs-on: pi5
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64  # Ensure we are only targeting amd64
          buildkitd-flags: --debug

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long  # Ensures we always push a unique tag

      - name: Check if cache image exists
        id: cache_exists
        run: |
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache > /dev/null 2>&1; then
            echo "cache_exists=true" >> $GITHUB_OUTPUT
          else
            echo "cache_exists=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true # Don't fail the job if the image doesn't exist

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .devcontainer
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64  # Ensuring a single architecture build
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
          no-cache: ${{ steps.cache_exists.outputs.cache_exists == 'false' }}

      - name: Verify Image in GHCR
        run: |
          skopeo inspect docker://ghcr.io/${{ env.IMAGE_NAME }}:latest | jq '.Layers | length'
